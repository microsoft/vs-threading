parameters:
  EnableAPIScan:

steps:

- powershell: echo "##vso[build.addbuildtag]compliance"
  displayName: üè∑Ô∏è Tag run with 'compliance'

- task: CopyFiles@2
  displayName: üìÇ Collect APIScan inputs
  inputs:
    SourceFolder: $(Build.ArtifactStagingDirectory)/Symbols-$(Agent.JobName)
    # Exclude any patterns from the Contents (e.g. `!**/git2*`) that we have symbols for but do not need to run APIScan on.
    Contents: |
      **
      !**/arm64/**
      !**/win-arm64/**
      !**/linux-*/**
      !**/osx*/**
    TargetFolder: $(Build.ArtifactStagingDirectory)/APIScanInputs

- task: APIScan@2
  displayName: üîç Run APIScan
  inputs:
    softwareFolder: $(Build.ArtifactStagingDirectory)/APIScanInputs
    softwareName: $(SymbolsFeatureName)
    softwareVersionNum: $(NBGV_MajorMinorVersion)
    isLargeApp: false
    toolVersion: Latest
  condition: and(succeeded(), ${{ parameters.EnableAPIScan }}, ne(variables.ApiScanClientId, ''))
  env:
    AzureServicesAuthConnectionString: runAs=App;AppId=$(ApiScanClientId);TenantId=$(ApiScanTenant);AppKey=$(ApiScanSecret)

# File bugs when APIScan finds issues
- task: TSAUpload@2
  displayName: ü™≥ TSA upload
  inputs:
    GdnPublishTsaOnboard: True
    GdnPublishTsaConfigFile: $(Build.SourcesDirectory)\azure-pipelines\TSAOptions.json
  condition: true
